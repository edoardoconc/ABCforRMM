lines(theta.support,dgamma(theta.support,a,b),col="gray",lwd=2,lty=lty)
text(2.1,2.25,expression(paste(italic(M),"=100",sep="")))
#Plot of the histogramm and kernel density estimate for the 3 groups of iid draws
hist( theta.sim10, prob=T,xlim=xlim,ylim=ylim,xlab="",main="",ylab="")
lines(theta.support,dgamma(theta.support,a,b),col="gray",lwd=2,lty=lty)
pippo=density(theta.sim1000)
plot(density(theta.sim1000),main="",ylab="",lwd=2)
#windows()
lines(density(theta.sim1000,bw=0.01),main="",ylab="",col="blue",lwd=2)
(a+sy)/(b+n)
set.seed(1)
a<-2  ; b<-1
sy<-66; n<-44
(a+sy)/(b+n)
theta.sim10<-rgamma(10,a+sy,b+n)
theta.sim100<-rgamma(100,a+sy,b+n)
theta.sim1000<-rgamma(1000,a+sy,b+n)
mean(theta.sim10) # MC estimate and MC standard error for 10 draws
quantile( theta.sim10, c(.025,.975))
quantile( theta.sim100, c(.025,.975))
quantile( theta.sim1000, c(.025,.975))
set.seed(1)
a<-2 ; b<-1
sy1<-217 ;  n1<-111
sy2<-66  ;  n2<-44
a+sy1; b+n1
a+sy2; b+n2
# MC sample of size M=10000 from the joint posterior
theta1.mc<-rgamma(10000,a+sy1, b+n1)
theta2.mc<-rgamma(10000,a+sy2, b+n2)
# The probability is estimated by the number of times in the sequence {(theta_1^(j),theta_2^(j)),j=1,2,...,M}
# the first component is > than the second, divided by M
mean(theta1.mc>theta2.mc) # questa probabilit? ? uguale alla prob che theta1 sia maggiore o UGUALE a theta2
x11()
par(mar=c(3,3,1,1),mgp=c(1.75,.75,0))
par(mfrow=c(1,1))
plot(density(theta1.mc/theta2.mc,adj=2),main="",xlim=c(.75,2.25),
xlab=expression(gamma==theta[1]/theta[2]),
ylab=expression(paste(italic("p("),gamma,"|",bold(y[1]),",",bold(y[2]),")",
sep="")) )
library(coda)
library(MASS)
library(rlg)
library(rgl)
library(ggplot2)
source("RejectionSamplingABC.R")
source("sorted_data_frame.R")
Yobs<-matrix(data=NA,1000,2)
for (i in 1:1000) {
if(sample.int(2,1,prob=c(0.5,0.5))==1){
Yobs[i,]=mvrnorm(1,rep(-5,2), matrix(c(1,0,0,1),2,2))
}
else{
Yobs[i,]=mvrnorm(1,rep(5,2),matrix(c(1,0,0,1),2,2))
}
}
for (i in 1:1000) {
if(sample.int(2,1,prob=c(0.5,0.5))==1){
Yobs[i,]=mvrnorm(1,rep(-5,2), matrix(c(1,0,0,1),2,2))
}
else{
Yobs[i,]=mvrnorm(1,rep(5,2),matrix(c(1,0,0,1),2,2))
}
}
x = seq(1,1000)
Y = seq(1,1000)
open3d()
plot3d(x,y,Yobs)
help(kde2d)
open3d()
plot3d(Yobs[1,],Yobs[2,],kde2d(Yobs[1,],Yobs[2,]))
open3d()
plot3d(kde2d(Yobs[1,],Yobs[2,]))
open3d()
plot3d(kde2d(Yobs[1,],Yobs[2,])[1],kde2d(Yobs[1,],Yobs[2,])[2],kde2d(Yobs[1,],Yobs[2,])[3])
Yobs<-matrix(data=NA,1000,2)
for (i in 1:1000) {
if(sample.int(2,1,prob=c(0.5,0.5))==1){
Yobs[i,]=mvrnorm(1,rep(-5,2), matrix(c(1,0,0,1),2,2))
}
else{
Yobs[i,]=mvrnorm(1,rep(5,2),matrix(c(1,0,0,1),2,2))
}
}
View(Yobs)
library(coda)
library(gtools)
#library(Boom)
library(transport)
library(MCMCpack)
library(coda)
library(MASS)
library(ggplot2)
Yobs<-numeric(1000)
for (i in 1:1000) {
compP = sample.int(3,1,prob=c(0.6,0.2,0.2))
if(compP == 1){
Yobs[i]=rnorm(1,-10,1)
}
else if (compP==2){
Yobs[i]=rnorm(1,-5,2)
}
else
{
Yobs[i]=rnorm(1,5,3)
}
}
data = ppp(Yobs, window=owin(c(-10,10),c(-10,10)))
library(spatstat)
data = ppp(Yobs, window=owin(c(-10,10),c(-10,10)))
help(ppp)
data = ppp(x=c(-10, 10), y=c(0,0), window=owin(c(-10,10),c(-10,10)))
# Fit a determinantal point process model to a point pattern dataset as described in Lavancier et al. (2015).
x = dppm(data ~ 1, dppGauss, method = "mincon")
View(x)
View(x)
plot.dppm(x)
plot.dppm(x , what = intensity)
plot.dppm(x , what = "intensity")
x
simulate.dppm(x)
# Fit a determinantal point process model to a point pattern dataset as described in Lavancier et al. (2015).
fit = dppm(data ~ 1, dppGauss, method = "mincon")
simulate.dppm(fit)
sim_fit = simulate.dppm(fit)
View(sim_fit)
dat = ppp(x=c(-10, 10), y=c(0,0), window=owin(c(-10,10),c(-10,10)))
# Fit a determinantal point process model to a point pattern dataset as described in Lavancier et al. (2015).
fit = dppm(dat ~ 1, dppGauss, data = Yobs, method = "mincon")
dat = ppp(x=c(-10, 10), y=c(0,0), window=owin(c(-10,10),c(-10,10)))
# Fit a determinantal point process model to a point pattern dataset as described in Lavancier et al. (2015).
fit = dppm(dat ~ 1, dppGauss, data = Yobs, method = "mincon")
fit = dppm(data ~ 1, dppGauss, method = "mincon")
sim_fit = simulate.dppm(fit)
fit = dppm(dat ~ 1, dppGauss, method = "mincon")
sim_fit = simulate.dppm(fit)
dat = ppp(x=c(-10, 10), y=c(0,0), window=owin(c(-10,10),c(-10,10)))
fit = dppm(dat ~ 1, dppGauss, method = "mincon")
sim_fit = simulate.dppm(fit)
length(sim_fit$x)
fit = dppm(dat ~ 1, dppGauss, method = "mincon")
sim_fit = simulate.dppm(fit)
length(sim_fit$x)
fit = dppm(dat ~ 1, dppGauss, method = "mincon")
sim_fit = simulate.dppm(fit)
length(sim_fit$x
)
dat = ppp(x=c(-10, 10), y=c(0,0), window=owin(c(-10,10),c(-10,10)))
# Fit a determinantal point process model to a point pattern dataset as described in Lavancier et al. (2015).
fit = dppm(dat ~ 1, dppGauss, data = Yobs, method = "mincon")
sim_fit = simulate.dppm(fit)
# Fit a determinantal point process model to a point pattern dataset as described in Lavancier et al. (2015).
fit = dppm(dat ~ 1, dppGauss, method = "mincon")
sim_fit = simulate.dppm(fit)
while (length(sim_fit$x) == 0 ) {
fit = dppm(dat ~ 1, dppGauss, method = "mincon")
sim_fit = simulate.dppm(fit)
}
propMean <- as.list(sim_fit$x)
setwd('/ABCforRMM/code')
rm(list = ls())
set.seed(42)
library(coda)
library(gtools)
#library(Boom)
library(transport)
library(MCMCpack)
library(coda)
library(MASS)
library(ggplot2)
source("RejectionSamplingABC_1D.R")
source("RejectionSamplingABC_2D.R")
source("sorted_data_frame.R")
source("DataGeneration.R")
source("PostProcessing.R")
source("PostProcessing_1d.R")
#########################################################################
### Parameter choice ####################################################
## Dimension (dim = 1 1-D ; dim = 2 2-D)
dim = 1
## Dataset ( data_choice = 0 default ; data_choice = 1 personalized data)
data_choice = 0
if (data_choice == 0){
#data = DataGeneration(dimension=1,type="gauss",n=1000,components=2,weights = c(0.5,0.5),mean=c(-5,5),sd=c(1,1))
data = DataGeneration(dimension=1,type="laplace",n=1000,components=1,weights = 1, mean=0, sigma=1)
}
# see function DataGEneration.R to modify other parameter
source("RejectionSamplingABC_1D.R")
source("RejectionSamplingABC_2D.R")
source("sorted_data_frame.R")
source("DataGeneration.R")
source("PostProcessing.R")
source("PostProcessing_1d.R")
setwd('/ABCforRMM/code')
rm(list = ls())
set.seed(42)
library(coda)
library(gtools)
#library(Boom)
library(transport)
library(MCMCpack)
library(coda)
library(MASS)
library(ggplot2)
source("RejectionSamplingABC_1D.R")
source("RejectionSamplingABC_2D.R")
source("sorted_data_frame.R")
source("DataGeneration.R")
source("PostProcessing.R")
source("PostProcessing_1d.R")
#########################################################################
### Parameter choice ####################################################
## Dimension (dim = 1 1-D ; dim = 2 2-D)
dim = 1
## Dataset ( data_choice = 0 default ; data_choice = 1 personalized data)
data_choice = 0
if (data_choice == 0){
#data = DataGeneration(dimension=1,type="gauss",n=1000,components=2,weights = c(0.5,0.5),mean=c(-5,5),sd=c(1,1))
data = DataGeneration(dimension=1,type="laplace",n=1000,components=1,weights = 1, mean=0, sigma=1)
}
# see function DataGEneration.R to modify other parameter
setwd('/ABCforRMM/code')
setwd('/ABCforRMM/code')
setwd('/ABCforRMM/code')
setwd('/ABCforRMM/code')
setwd("/ABCforRMM/code")
setwd("/ABCforRMM/code")
rm(list = ls())
set.seed(42)
setwd("/ABCforRMM/code")
setwd("/home/edoc/ABCforRMM/code")
rm(list = ls())
set.seed(42)
library(coda)
library(gtools)
#library(Boom)
library(transport)
library(MCMCpack)
library(coda)
library(MASS)
library(ggplot2)
source("RejectionSamplingABC_1D.R")
source("RejectionSamplingABC_2D.R")
source("sorted_data_frame.R")
source("DataGeneration.R")
source("PostProcessing.R")
#source("PostProcessing_1d.R")
#########################################################################
### Parameter choice ####################################################
## Dimension (dim = 1 1-D ; dim = 2 2-D)
dim = 1
## Dataset ( data_choice = 0 default ; data_choice = 1 personalized data)
data_choice = 0
if (data_choice == 0){
#data = DataGeneration(dimension=1,type="gauss",n=1000,components=2,weights = c(0.5,0.5),mean=c(-5,5),sd=c(1,1))
data = DataGeneration(dimension=1,type="laplace",n=1000,components=2,weights = c(0.4,0.6), mean=c(-5,5), sigma=c(1,4))
}
# see function DataGEneration.R to modify other parameter
if (data_choice == 1)
data = load(file = '...') # insert data
plot(density(data))
sum_stat = 1
## Prior choice (type of prior available for the 1-D case)
# non-repulsive: "NIG"
# repulsive: "StraussProcess", "PenttinenProcess", "DiggleGrattonProcess"
prior_type = "NIG"
## Accepting Tollerance on the distance
# usually we want to accept 5-10%
tol = 0.01
## Number of iteration
iter = 200000
## Initialization of the Markov chains
if (dim == 1){
mean = list(0,0)
var = list(1,1)
weight = list(0.5,0.5)
n_components = 2
}
if (dim == 2){
mean = list(c(0,0),c(0,0))
cov = list(matrix(c(1,0,0,1),2,2),matrix(c(1,0,0,1),2,2))
weight = c(0.5,0.5)
n_components = 2
}
########################################################################
### running the ABC sampler ############################################
if (dim == 1)
SampledPosteriorWithABC = RejectionSamplingABC_1D(data, iter, sum_stat, c(mean, var, weight, n_components), prior_type)
if (dim == 2)
SampledPosteriorWithABC = RejectionSamplingABC_2D(data, iter, sum_stat, list(mean, cov, weight, n_components))
save(SampledPosteriorWithABC, file = "lap-mix_200k_NIG.Rdata")
setwd("/home/edoc/ABCforRMM/code")
rm(list = ls())
set.seed(42)
library(coda)
library(gtools)
#library(Boom)
library(transport)
library(MCMCpack)
library(coda)
library(MASS)
library(ggplot2)
source("RejectionSamplingABC_1D.R")
source("RejectionSamplingABC_2D.R")
source("sorted_data_frame.R")
source("DataGeneration.R")
source("PostProcessing.R")
#source("PostProcessing_1d.R")
#########################################################################
### Parameter choice ####################################################
## Dimension (dim = 1 1-D ; dim = 2 2-D)
dim = 1
## Dataset ( data_choice = 0 default ; data_choice = 1 personalized data)
data_choice = 0
if (data_choice == 0){
#data = DataGeneration(dimension=1,type="gauss",n=1000,components=2,weights = c(0.5,0.5),mean=c(-5,5),sd=c(1,1))
data = DataGeneration(dimension=1,type="tds",n=1000,dof=20)
}
# see function DataGEneration.R to modify other parameter
if (data_choice == 1)
data = load(file = '...') # insert data
plot(density(data))
if (data_choice == 0){
#data = DataGeneration(dimension=1,type="gauss",n=1000,components=2,weights = c(0.5,0.5),mean=c(-5,5),sd=c(1,1))
data = DataGeneration(dimension=1,type="tds",n=1000,components = 1, dof=20)
}
# see function DataGEneration.R to modify other parameter
if (data_choice == 1)
data = load(file = '...') # insert data
plot(density(data))
#
if (data_choice == 0){
#data = DataGeneration(dimension=1,type="gauss",n=1000,components=2,weights = c(0.5,0.5),mean=c(-5,5),sd=c(1,1))
data = DataGeneration(dimension=1,type="tds",n=1000,components = 1, dof=20)
}
# see function DataGEneration.R to modify other parameter
if (data_choice == 1)
data = load(file = '...') # insert data
plot(density(data))
if (data_choice == 0){
#data = DataGeneration(dimension=1,type="gauss",n=1000,components=2,weights = c(0.5,0.5),mean=c(-5,5),sd=c(1,1))
data = DataGeneration(dimension=1,type="tds",n=1000,components = 1,weights = 1,  dof=20)
}
# see function DataGEneration.R to modify other parameter
if (data_choice == 1)
data = load(file = '...') # insert data
plot(density(data))
sum_stat = 1
## Prior choice (type of prior available for the 1-D case)
# non-repulsive: "NIG"
# repulsive: "StraussProcess", "PenttinenProcess", "DiggleGrattonProcess"
prior_type = "StraussProcess"
## Accepting Tollerance on the distance
# usually we want to accept 5-10%
tol = 0.01
## Number of iteration
iter = 200000
## Initialization of the Markov chains
if (dim == 1){
mean = list(0,0)
var = list(1,1)
weight = list(0.5,0.5)
n_components = 2
}
if (dim == 2){
mean = list(c(0,0),c(0,0))
cov = list(matrix(c(1,0,0,1),2,2),matrix(c(1,0,0,1),2,2))
weight = c(0.5,0.5)
n_components = 2
}
########################################################################
### running the ABC sampler ############################################
if (dim == 1)
SampledPosteriorWithABC = RejectionSamplingABC_1D(data, iter, sum_stat, c(mean, var, weight, n_components), prior_type)
if (dim == 2)
SampledPosteriorWithABC = RejectionSamplingABC_2D(data, iter, sum_stat, list(mean, cov, weight, n_components))
save(SampledPosteriorWithABC, file = "tds20_200k_gaussnew.Rdata")
setwd("/home/edoc/ABCforRMM/code")
rm(list = ls())
set.seed(42)
library(coda)
library(gtools)
#library(Boom)
library(transport)
library(MCMCpack)
library(coda)
library(MASS)
library(ggplot2)
source("RejectionSamplingABC_1D.R")
source("RejectionSamplingABC_2D.R")
source("sorted_data_frame.R")
source("DataGeneration.R")
source("PostProcessing.R")
#source("PostProcessing_1d.R")
#########################################################################
### Parameter choice ####################################################
## Dimension (dim = 1 1-D ; dim = 2 2-D)
dim = 1
## Dataset ( data_choice = 0 default ; data_choice = 1 personalized data)
data_choice = 0
if (data_choice == 0){
#data = DataGeneration(dimension=1,type="gauss",n=1000,components=2,weights = c(0.5,0.5),mean=c(-5,5),sd=c(1,1))
data = DataGeneration(dimension=1,type="tds",n=1000,components = 1,weights = 1,  dof=20)
}
# see function DataGEneration.R to modify other parameter
if (data_choice == 1)
data = load(file = '...') # insert data
plot(density(data))
## Summary statistic
# sum_stat = 0 use Wasserstein distance to evaluate the distance between data and proposed approximation
# sum_stat = 1 use Summary statistics to evaluate the distance between data and proposed approximation
sum_stat = 1
## Prior choice (type of prior available for the 1-D case)
# non-repulsive: "NIG"
# repulsive: "StraussProcess", "PenttinenProcess", "DiggleGrattonProcess"
prior_type = "StraussProcess"
## Accepting Tollerance on the distance
# usually we want to accept 5-10%
tol = 0.01
## Number of iteration
iter = 200000
## Initialization of the Markov chains
if (dim == 1){
mean = list(0,0)
var = list(1,1)
weight = list(0.5,0.5)
n_components = 2
}
if (dim == 2){
mean = list(c(0,0),c(0,0))
cov = list(matrix(c(1,0,0,1),2,2),matrix(c(1,0,0,1),2,2))
weight = c(0.5,0.5)
n_components = 2
}
########################################################################
### running the ABC sampler ############################################
if (dim == 1)
SampledPosteriorWithABC = RejectionSamplingABC_1D(data, iter, sum_stat, c(mean, var, weight, n_components), prior_type)
if (dim == 2)
SampledPosteriorWithABC = RejectionSamplingABC_2D(data, iter, sum_stat, list(mean, cov, weight, n_components))
save(SampledPosteriorWithABC, file = "tds20_200k_gaussnew.Rdata")
setwd("/home/edoc/ABCforRMM/code")
rm(list = ls())
set.seed(42)
library(coda)
library(gtools)
#library(Boom)
library(transport)
library(MCMCpack)
library(coda)
library(MASS)
library(ggplot2)
source("RejectionSamplingABC_1D.R")
source("RejectionSamplingABC_2D.R")
source("sorted_data_frame.R")
source("DataGeneration.R")
source("PostProcessing.R")
#source("PostProcessing_1d.R")
#########################################################################
### Parameter choice ####################################################
## Dimension (dim = 1 1-D ; dim = 2 2-D)
dim = 1
## Dataset ( data_choice = 0 default ; data_choice = 1 personalized data)
data_choice = 0
if (data_choice == 0){
#data = DataGeneration(dimension=1,type="gauss",n=1000,components=2,weights = c(0.5,0.5),mean=c(-5,5),sd=c(1,1))
data = DataGeneration(dimension=1,type="tds",n=1000,components = 1,weights = 1,  dof=20)
}
# see function DataGEneration.R to modify other parameter
if (data_choice == 1)
data = load(file = '...') # insert data
plot(density(data))
## Summary statistic
# sum_stat = 0 use Wasserstein distance to evaluate the distance between data and proposed approximation
# sum_stat = 1 use Summary statistics to evaluate the distance between data and proposed approximation
sum_stat = 1
## Prior choice (type of prior available for the 1-D case)
# non-repulsive: "NIG"
# repulsive: "StraussProcess", "PenttinenProcess", "DiggleGrattonProcess"
prior_type = "StraussProcess"
## Accepting Tollerance on the distance
# usually we want to accept 5-10%
tol = 0.01
## Number of iteration
iter = 200000
## Initialization of the Markov chains
if (dim == 1){
mean = list(0,0)
var = list(1,1)
weight = list(0.5,0.5)
n_components = 2
}
if (dim == 2){
mean = list(c(0,0),c(0,0))
cov = list(matrix(c(1,0,0,1),2,2),matrix(c(1,0,0,1),2,2))
weight = c(0.5,0.5)
n_components = 2
}
########################################################################
### running the ABC sampler ############################################
if (dim == 1)
SampledPosteriorWithABC = RejectionSamplingABC_1D(data, iter, sum_stat, c(mean, var, weight, n_components), prior_type)
if (dim == 2)
SampledPosteriorWithABC = RejectionSamplingABC_2D(data, iter, sum_stat, list(mean, cov, weight, n_components))
save(SampledPosteriorWithABC, file = "tds20_200k_gaussnew.Rdata")
tol = 0.003
#k = null significa che me lo mette lui
PostProcessing_1d(SampledPosteriorWithABC,Yobs=data, tol=tol,k=NULL)
source("PostProcessing_1d.R")
tol = 0.003
#k = null significa che me lo mette lui
PostProcessing_1d(SampledPosteriorWithABC,Yobs=data, tol=tol,k=NULL)
